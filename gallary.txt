package com.example.hi.ooo;

import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.drawable.BitmapDrawable;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.support.annotation.Nullable;
import android.support.annotation.RequiresApi;
import android.support.v7.app.AppCompatActivity;
import android.util.Base64;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageView;

import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.StringRequest;
import com.android.volley.toolbox.Volley;

import java.io.ByteArrayOutputStream;
import java.util.HashMap;
import java.util.Map;

public class MainActivity extends AppCompatActivity {
    public static String publicFirstName;
    public static String publicHobby;
    public String imageString;
    public ImageView MyImage;
    public RequestQueue queue;
    public Button send;
    public EditText findword;
    @RequiresApi(api = Build.VERSION_CODES.M)
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate( savedInstanceState );
        setContentView( R.layout.activity_main );
        Button OpenCamera = (Button) findViewById( R.id.TakePhoto );
        send = (Button) findViewById( R.id.Send );
        MyImage = (ImageView) findViewById( R.id.TheImage );
       // MyImage.setImageResource(R.drawable.o);
        findword=(EditText)findViewById(R.id.findWord);
        OpenCamera.setOnClickListener( new View.OnClickListener() {
                                           @Override
                                           public void onClick(View view) {
//                                               Intent intent = new Intent( MediaStore.ACTION_IMAGE_CAPTURE );
//                                               startActivityForResult( intent, 0 );



                                               Intent intent = new Intent(Intent.ACTION_PICK,
                                                       android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);
                                               startActivityForResult(intent , 1);

                                           }
                                       }
        );

//        Button find = findViewById(R.id.find);
//
//        find.setOnClickListener(new View.OnClickListener() {
//            @Override
//            public void onClick(View v) {
//                getVolley();
//            }
//        });


        //encode image to base64 string
        send.setOnClickListener( new View.OnClickListener() {

            public void onClick(View view) {
                String url = "http://192.168.137.203:5000/postJsonHandler";
                imageString=Encoding(MyImage);//

                StringRequest postRequest = new StringRequest(Request.Method.POST, url,
                        new Response.Listener<String>()
                        {
                            @Override
                            public void onResponse(String response) {
                                // response
                                Log.d("Response", response);
//decode base64 string to image
                                //response =
                                  //"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNkYPhfDwAChwGA60e6kgAAAABJRU5ErkJggg==";


                                BitmapDrawable drawable = (BitmapDrawable) MyImage.getDrawable();
                                Bitmap bitmap = drawable.getBitmap();
                                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                                bitmap.compress(Bitmap.CompressFormat.PNG, 100, baos);
                                byte[] imageBytes = baos.toByteArray();
                                imageBytes = Base64.decode(response, Base64.DEFAULT);
                                Bitmap decodedImage = BitmapFactory.decodeByteArray(imageBytes, 0, imageBytes.length);
                                MyImage.setImageBitmap(decodedImage);
                                System.out.println(response);
                            }
                        },
                        new Response.ErrorListener()
                        {
                            @Override
                            public void onErrorResponse(VolleyError error) {
                                // error
                                Log.d("Error.Response", "error");
                            }
                        }
                ) {
                    @Override
                    protected Map<String, String> getParams()
                    {
                        Map<String, String>  params = new HashMap<String, String>();
                        params.put("name", imageString);
                        params.put("word",findword.getText().toString() );
                        return params;
                    }
                };
// add it to the RequestQueue
                queue=Volley.newRequestQueue(getApplicationContext());
                queue.add(postRequest);
            }
        } );
    }








    //    private void getVolley(){
//
//
//        final String username = etUname.getText().toString().trim();
//        final String password = etPass.getText().toString().trim();
//
//        URLline = "https://demonuts.com/Demonuts/JsonTest/Tennis/loginGETrequest.php?username="+username+"&password="+password;
//
//        Log.d("getxxx",URLline);
//
//        StringRequest stringRequest = new StringRequest(Request.Method.GET, URLline,
//                new Response.Listener<String>() {
//                    @Override
//                    public void onResponse(String response) {
//
//                        Log.d("strrrrr",">>"+response);
//                        parseData(response);
//
//                    }
//                },
//                new Response.ErrorListener() {
//                    @Override
//                    public void onErrorResponse(VolleyError error) {
//                        //displaying the error in toast if occurrs
//                        Toast.makeText(getApplicationContext(), error.getMessage(), Toast.LENGTH_SHORT).show();
//                    }
//                });
//
//        // request queue
//        RequestQueue requestQueue = Volley.newRequestQueue(this);
//
//        requestQueue.add(stringRequest);
//    }
//
//    public void parseData(String response) {
//
//        try {
//            JSONObject jsonObject = new JSONObject(response);
//            if (jsonObject.getString("status").equals("true")) {
//                JSONArray dataArray = jsonObject.getJSONArray("data");
//                for (int i = 0; i < dataArray.length(); i++) {
//
//                    JSONObject dataobj = dataArray.getJSONObject(i);
//                    publicFirstName = dataobj.getString("name");
//                    publicHobby = dataobj.getString("hobby");
//                }
//
//                Intent intent = new Intent(MainActivity.this,SecondActivity.class);
//                startActivity(intent);
//            }
//        } catch (JSONException e) {
//            e.printStackTrace();
//        }
//
//    }
//}
//    //@Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult( requestCode, resultCode, data );
        Uri selectedImage = data.getData();
        MyImage .setImageURI(selectedImage);
        Bitmap bitmap = (Bitmap) data.getExtras().get( "data" );
        MyImage.setImageBitmap( bitmap );
    }
    public String Encoding(ImageView image)
    {
        BitmapDrawable drawable = (BitmapDrawable) MyImage.getDrawable();
        Bitmap bitmap = drawable.getBitmap();
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        bitmap.compress(Bitmap.CompressFormat.PNG, 100, baos);
        byte[] imageBytes = baos.toByteArray();
        imageString = Base64.encodeToString(imageBytes, Base64.DEFAULT);
        System.out.println( imageString);
        return imageString;
    }
}